x-custom-variables:
  &global-variables
  AEM_PUBLISH_HOSTNAME: aem-publish
  AEM_PUBLISH_HTTP_PORT: 4503
  DISPATCHER_HOSTNAME: dispatcher

services:
  aem-base-jvm11:
    build:
      context: .
      dockerfile: 1_base/Dockerfile
      args:
        JAVA_VERSION: 11
    image: ciechanowiec/aem-base:jvm11-1.0.0
    container_name: aem-base
    hostname: aem-base
    networks:
      - aem-network

  aem-base-jvm21:
    build:
      context: .
      dockerfile: 1_base/Dockerfile
      args:
        JAVA_VERSION: 21
    image: ciechanowiec/aem-base:jvm21-1.0.0
    container_name: aem-base
    hostname: aem-base
    networks:
      - aem-network

  aem-author-65:
    build:
      context: .
      dockerfile: 2_aem/Dockerfile
      args:
        <<: *global-variables
        AEM_BASE_IMAGE_VERSION: jvm11-1.0.0
        IS_IDLE_REPLICATION_TO_AEM_PUBLISH: false
        AEM_DIR: /opt/aem/author
        AEM_TYPE: 65
        RUN_MODES: author,nosamplecontent,local,author-local,docker
        INSTALL_WKND_SAMPLE: false
        AEM_HTTP_PORT: 4502
        AEM_HTTPS_PORT: 8443
        DEBUG_PORT: 8888
        NUM_OF_EXPECTED_BUNDLES_AFTER_FIRST_START: 733
        NUM_OF_EXPECTED_BUNDLES_AFTER_SECOND_AND_SUBSEQUENT_STARTS: 740
        LICENSE_KEY: ${LICENSE_KEY:-}
        SECRETS_DIR: /mnt/secrets
    environment:
      <<: *global-variables
      IS_IDLE_REPLICATION_TO_AEM_PUBLISH: false
      AEM_DIR: /opt/aem/author
      AEM_TYPE: 65
      RUN_MODES: author,nosamplecontent,local,author-local,docker
      AEM_HTTP_PORT: 4502
      AEM_HTTPS_PORT: 8443
      DEBUG_PORT: 8888
      LICENSE_KEY: ${LICENSE_KEY:-}
      SECRETS_DIR: /mnt/secrets
    image: aem-author-65:latest
    container_name: aem-author-65
    volumes:
      - type: volume
        source: aem-author-65-data
        target: /opt/aem/author/crx-quickstart
      - type: bind
        source: secrets/SAMPLE_AEM_SECRET
        target: /mnt/secrets/SAMPLE_AEM_SECRET
        read_only: true
    # exec is required in order to set the Java process as PID 1 inside the container, since Docker sends
    # termination signals only to PID 1, and we need those signals to be handled by the java process:
    entrypoint: [ "sh", "-c", "exec $$AEM_DIR/aem-starter.sh" ]
    # Grace period should be long enough so that the JCR is closed correctly and doesn't get corrupted:
    stop_grace_period: 300s
    hostname: aem-author
    networks:
      - aem-network
    ports:
      - target: 4502
        published: 4502
        protocol: tcp
        mode: host
      - target: 8443
        published: 8443
        protocol: tcp
        mode: host
      - target: 8888
        published: 8888
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11

  aem-author-cloud:
    build:
      context: .
      dockerfile: 2_aem/Dockerfile
      args:
        <<: *global-variables
        AEM_BASE_IMAGE_VERSION: jvm21-1.0.0
        IS_IDLE_REPLICATION_TO_AEM_PUBLISH: false
        AEM_DIR: /opt/aem/author
        AEM_TYPE: cloud
        RUN_MODES: author,nosamplecontent,local,author-local,docker
        INSTALL_WKND_SAMPLE: false
        # Docs:
        # https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/edge-delivery/wysiwyg-authoring/edge-dev-getting-started:
        INSTALL_XWALK_EDS_TEMPLATE: true
        # Docs:
        # https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/implementing/developing/universal-editor/developer-overview
        ENABLE_ACCESS_FOR_REMOTE_UNIVERSAL_EDITOR: true
        AEM_HTTP_PORT: 4502
        AEM_HTTPS_PORT: 8443
        # Docs:
        # https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/implementing/developing/universal-editor/local-dev:
        UNIVERSAL_EDITOR_SERVICE_PORT: 8000
        DEBUG_PORT: 8888
        NUM_OF_EXPECTED_BUNDLES_AFTER_FIRST_START: 702
        NUM_OF_EXPECTED_BUNDLES_AFTER_SECOND_AND_SUBSEQUENT_STARTS: 702
        LICENSE_KEY: ${LICENSE_KEY:-}
        SECRETS_DIR: /mnt/secrets
        PATH_INSIDE_CONTAINER_TO_EDS_GIT_REPOSITORY: /mnt/eds-git-repository
    environment:
      <<: *global-variables
      IS_IDLE_REPLICATION_TO_AEM_PUBLISH: false
      AEM_DIR: /opt/aem/author
      AEM_TYPE: cloud
      RUN_MODES: author,nosamplecontent,local,author-local,docker
      AEM_HTTP_PORT: 4502
      AEM_HTTPS_PORT: 8443
      # Docs:
      # https://experienceleague.adobe.com/en/docs/experience-manager-cloud-service/content/implementing/developing/universal-editor/local-dev:
      UNIVERSAL_EDITOR_SERVICE_PORT: 8000
      DEBUG_PORT: 8888
      LICENSE_KEY: ${LICENSE_KEY:-}
      SECRETS_DIR: /mnt/secrets
      # Config for `com.adobe.aem.wcm.franklin.use.Page#editorServiceEndpoint`
      # and `com.adobe.aem.wcm.franklin.internal.UniversalEditorSettings`. Required for
      # Universal Editor to work:
      AEM_XWALK_AUE_ENDPOINT: "https://localhost:8000"
      # Config for `com.adobe.aem.wcm.franklin.use.Page#editorConnection`
      # and `/libs/core/franklin/components/page/v1/page/page.html`. Required for
      # Universal Editor to work:
      AEM_EXTERNALIZER_AUTHOR: "https://localhost:8443"
      PATH_INSIDE_CONTAINER_TO_EDS_GIT_REPOSITORY: /mnt/eds-git-repository
    image: aem-author-cloud:latest
    container_name: aem-author-cloud
    volumes:
      - type: volume
        source: aem-author-cloud-data
        target: /opt/aem/author/crx-quickstart
      - type: bind
        source: secrets/SAMPLE_AEM_SECRET
        target: /mnt/secrets/SAMPLE_AEM_SECRET
        read_only: true
    # exec is required in order to set the Java process as PID 1 inside the container, since Docker sends
    # termination signals only to PID 1, and we need those signals to be handled by the java process:
    entrypoint: [ "sh", "-c", "exec $$AEM_DIR/aem-starter.sh" ]
    # Grace period should be long enough so that the JCR is closed correctly and doesn't get corrupted:
    stop_grace_period: 300s
    hostname: aem-author
    networks:
      - aem-network
    ports:
      - target: 4502
        published: 4502
        protocol: tcp
        mode: host
        # Default port for EDS proxy (https://github.com/adobe/helix-cli):
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
      - target: 8000
        published: 8000
        protocol: tcp
        mode: host
      - target: 8443
        published: 8443
        protocol: tcp
        mode: host
      - target: 8888
        published: 8888
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm21

  aem-publish-65:
    build:
      context: .
      dockerfile: 2_aem/Dockerfile
      args:
        <<: *global-variables
        AEM_BASE_IMAGE_VERSION: jvm11-1.0.0
        AEM_DIR: /opt/aem/publish
        AEM_TYPE: 65
        RUN_MODES: publish,nosamplecontent,local,publish-local,docker
        INSTALL_WKND_SAMPLE: false
        AEM_HTTP_PORT: 4503
        AEM_HTTPS_PORT: 8444
        DEBUG_PORT: 8889
        NUM_OF_EXPECTED_BUNDLES_AFTER_FIRST_START: 733
        NUM_OF_EXPECTED_BUNDLES_AFTER_SECOND_AND_SUBSEQUENT_STARTS: 740
        LICENSE_KEY: ${LICENSE_KEY:-}
        SECRETS_DIR: /mnt/secrets
    environment:
      AEM_DIR: /opt/aem/publish
      AEM_TYPE: 65
      RUN_MODES: publish,nosamplecontent,local,publish-local,docker
      AEM_HTTP_PORT: 4503
      AEM_HTTPS_PORT: 8444
      DEBUG_PORT: 8889
      LICENSE_KEY: ${LICENSE_KEY:-}
      SECRETS_DIR: /mnt/secrets
    image: aem-publish-65:latest
    container_name: aem-publish-65
    volumes:
      - type: volume
        source: aem-publish-65-data
        target: /opt/aem/publish/crx-quickstart
      - type: bind
        source: secrets/SAMPLE_AEM_SECRET
        target: /mnt/secrets/SAMPLE_AEM_SECRET
        read_only: true
    # exec is required in order to set the Java process as PID 1 inside the container, since Docker sends
    # termination signals only to PID 1, and we need those signals to be handled by the java process:
    entrypoint: [ "sh", "-c", "exec $$AEM_DIR/aem-starter.sh" ]
    # Grace period should be long enough so that the JCR is closed correctly and doesn't get corrupted:
    stop_grace_period: 300s
    hostname: aem-publish
    networks:
      - aem-network
    ports:
      - target: 4503
        published: 4503
        protocol: tcp
        mode: host
      - target: 8444
        published: 8444
        protocol: tcp
        mode: host
      - target: 8889
        published: 8889
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11

  aem-publish-cloud:
    build:
      context: .
      dockerfile: 2_aem/Dockerfile
      args:
        <<: *global-variables
        AEM_BASE_IMAGE_VERSION: jvm21-1.0.0
        AEM_DIR: /opt/aem/publish
        AEM_TYPE: cloud
        RUN_MODES: publish,nosamplecontent,local,publish-local,docker
        INSTALL_WKND_SAMPLE: false
        AEM_HTTP_PORT: 4503
        AEM_HTTPS_PORT: 8444
        DEBUG_PORT: 8889
        NUM_OF_EXPECTED_BUNDLES_AFTER_FIRST_START: 696
        NUM_OF_EXPECTED_BUNDLES_AFTER_SECOND_AND_SUBSEQUENT_STARTS: 696
        LICENSE_KEY: ${LICENSE_KEY:-}
        SECRETS_DIR: /mnt/secrets
    environment:
      AEM_DIR: /opt/aem/publish
      AEM_TYPE: cloud
      RUN_MODES: publish,nosamplecontent,local,publish-local,docker
      AEM_HTTP_PORT: 4503
      AEM_HTTPS_PORT: 8444
      DEBUG_PORT: 8889
      LICENSE_KEY: ${LICENSE_KEY:-}
      SECRETS_DIR: /mnt/secrets
    image: aem-publish-cloud:latest
    container_name: aem-publish-cloud
    volumes:
      - type: volume
        source: aem-publish-cloud-data
        target: /opt/aem/publish/crx-quickstart
      - type: bind
        source: secrets/SAMPLE_AEM_SECRET
        target: /mnt/secrets/SAMPLE_AEM_SECRET
        read_only: true
    # exec is required in order to set the Java process as PID 1 inside the container, since Docker sends
    # termination signals only to PID 1, and we need those signals to be handled by the java process:
    entrypoint: [ "sh", "-c", "exec $$AEM_DIR/aem-starter.sh" ]
    # Grace period should be long enough so that the JCR is closed correctly and doesn't get corrupted:
    stop_grace_period: 300s
    hostname: aem-publish
    networks:
      - aem-network
    ports:
      - target: 4503
        published: 4503
        protocol: tcp
        mode: host
      - target: 8444
        published: 8444
        protocol: tcp
        mode: host
      - target: 8889
        published: 8889
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm21

  dispatcher-amd:
    build:
      context: .
      dockerfile: 3_dispatcher/Dockerfile
      args:
        <<: *global-variables
        CPU_ARCH: x86_64
    image: dispatcher-amd:latest
    container_name: dispatcher-amd
    hostname: dispatcher
    networks:
      - aem-network
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11

  dispatcher-arm:
    build:
      context: .
      dockerfile: 3_dispatcher/Dockerfile
      args:
        <<: *global-variables
        CPU_ARCH: aarch64
    image: dispatcher-arm:latest
    container_name: dispatcher-arm
    hostname: dispatcher
    networks:
      - aem-network
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11

  varnish:
    build:
      context: .
      dockerfile: 4_varnish/Dockerfile
      args:
        <<: *global-variables
    image: varnish:latest
    container_name: varnish
    hostname: varnish
    networks:
      - aem-network
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11

  solr1:
    build:
      context: .
      dockerfile: 5_solr/Dockerfile
      args:
        SOLR_DIR: /opt/solr
        ZK_HOST: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
        IS_UNSAFE: true
    environment:
      SOLR_DIR: /opt/solr
      SOLR_INTERNAL_PORT: 8983
    image: solr:latest
    container_name: solr1
    entrypoint: [ "sh", "-c", "$$SOLR_DIR/solr-starter.sh" ]
    hostname: solr1
    networks:
      - aem-network
    ports:
      - target: 8983
        published: 8983
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11
      - zookeeper1

  solr2:
    build:
      context: .
      dockerfile: 5_solr/Dockerfile
      args:
        SOLR_DIR: /opt/solr
        ZK_HOST: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
        IS_UNSAFE: true
    environment:
      SOLR_DIR: /opt/solr
      SOLR_INTERNAL_PORT: 8983
    image: solr:latest
    container_name: solr2
    entrypoint: [ "sh", "-c", "$$SOLR_DIR/solr-starter.sh" ]
    hostname: solr2
    networks:
      - aem-network
    ports:
      - target: 8983
        published: 8984
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11
      - zookeeper2

  solr3:
    build:
      context: .
      dockerfile: 5_solr/Dockerfile
      args:
        SOLR_DIR: /opt/solr
        ZK_HOST: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
        IS_UNSAFE: true
    environment:
      SOLR_DIR: /opt/solr
      SOLR_INTERNAL_PORT: 8983
    image: solr:latest
    container_name: solr3
    entrypoint: [ "sh", "-c", "$$SOLR_DIR/solr-starter.sh" ]
    hostname: solr3
    networks:
      - aem-network
    ports:
      - target: 8983
        published: 8985
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11
      - zookeeper3

  zookeeper1:
    build:
      context: .
      dockerfile: 6_zookeeper/Dockerfile
      args:
        ZOOKEEPER_DIR: /opt/zookeeper
        ZOOKEEPER_DATA_DIR: /var/lib/zookeeper
    environment:
      ZOOKEEPER_DIR: /opt/zookeeper
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper
      ZOOKEEPER_MY_ID: "1"
    image: zookeeper:latest
    container_name: zookeeper1
    entrypoint: [ "sh", "-c", "$$ZOOKEEPER_DIR/zookeeper-starter.sh" ]
    hostname: zookeeper1
    networks:
      - aem-network
    ports:
      - target: 2181
        published: 2181
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11

  zookeeper2:
    build:
      context: .
      dockerfile: 6_zookeeper/Dockerfile
      args:
        ZOOKEEPER_DIR: /opt/zookeeper
        ZOOKEEPER_DATA_DIR: /var/lib/zookeeper
    environment:
      ZOOKEEPER_DIR: /opt/zookeeper
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper
      ZOOKEEPER_MY_ID: "2"
    image: zookeeper:latest
    container_name: zookeeper2
    entrypoint: [ "sh", "-c", "$$ZOOKEEPER_DIR/zookeeper-starter.sh" ]
    hostname: zookeeper2
    networks:
      - aem-network
    ports:
      - target: 2181
        published: 2182
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11

  zookeeper3:
    build:
      context: .
      dockerfile: 6_zookeeper/Dockerfile
      args:
        ZOOKEEPER_DIR: /opt/zookeeper
        ZOOKEEPER_DATA_DIR: /var/lib/zookeeper
    environment:
      ZOOKEEPER_DIR: /opt/zookeeper
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper
      ZOOKEEPER_MY_ID: "3"
    image: zookeeper:latest
    container_name: zookeeper3
    entrypoint: [ "sh", "-c", "$$ZOOKEEPER_DIR/zookeeper-starter.sh" ]
    hostname: zookeeper3
    networks:
      - aem-network
    ports:
      - target: 2181
        published: 2183
        protocol: tcp
        mode: host
    depends_on:
      - aem-base-jvm11

  fake-smtp-server:
    environment:
      - FAKESMTP_AUTHENTICATION_USERNAME=myuser
      - FAKESMTP_AUTHENTICATION_PASSWORD=mysecretpassword
    image: gessnerfl/fake-smtp-server:2.1.3
    container_name: fake-smtp-server
    hostname: fake-smtp-server
    networks:
      - aem-network
    ports:
      # expose smtp port:
      - target: 8025
        published: 8025
        protocol: tcp
        mode: host
        # expose web ui:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
        # expose management api:
      - target: 8081
        published: 8081
        protocol: tcp
        mode: host

volumes:
  aem-author-65-data:
    name: "aem-author-65-data"
  aem-author-cloud-data:
    name: "aem-author-cloud-data"
  aem-publish-65-data:
    name: "aem-publish-65-data"
  aem-publish-cloud-data:
    name: "aem-publish-cloud-data"

networks:
  aem-network:
    driver: bridge
    # This name is required to avoid name prefixing by Docker:
    name: aem-network
